generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider                  = "prisma-erd-generator"
  output                    = "../src/docs/diagrams/diagram_erd.md"
  includeRelationFromFields = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id        String    @id
  name      String
  email     String    @unique
  password  String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  orders    Order[]

  @@map("customers")
}

enum Category {
  ELECTRONICS
  BOOKS
  SPORTS
  GAMES
  FASHION
}

model Product {
  id          String    @id
  name        String
  price       Float
  category    Category
  description String?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")
  stock       Stock?
  orders      Order[]

  @@index([category])
  @@map("products")
}

model Stock {
  id        String    @id
  amount    Int
  productId String    @unique @map("product_id")
  product   Product   @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("stocks")
}

model Order {
  id         String    @id
  price      Float
  amount     Int
  productId  String    @map("product_id")
  product    Product   @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  customerId String    @map("customer_id")
  customer   Customer  @relation(fields: [customerId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")

  @@index([productId])
  @@index([customerId])
  @@map("orders")
}
